playerOneMove setPlayerOneMove
playerTwoMove setPlayerTwoMove 

   function declareWinner(): boolean {
        if (playerOneState.length + playerTwoState.length === boardSize ** 2) {
            setWinner('tie')
            return true
        } else {
            if (fiveConseq(playerOneState)) {
                setWinner(PLAYER.PLAYER_ONE)
                return true
            } else if (fiveConseq(playerTwoState)) {
                setWinner(PLAYER.PLAYER_TWO)
                return true
            } else if (fiveDown(playerTwoState)) {
                setWinner(PLAYER.PLAYER_TWO)
                return true
            } else if (fiveDown(playerOneState)) {
                setWinner(PLAYER.PLAYER_ONE)
                return true
            } else if (diagLeft(playerTwoState)) {
                setWinner(PLAYER.PLAYER_TWO)
                return true
            } else if (diagLeft(playerOneState)) {
                setWinner(PLAYER.PLAYER_ONE)
                return true
            } else if (diagRight(playerTwoState)) {
                setWinner(PLAYER.PLAYER_TWO)
                return true
            } else if (diagRight(playerOneState)) {
                setWinner(PLAYER.PLAYER_ONE)
                return true
            } else {
                return false
            }
        }
    }

    const getClassName = (player: PLAYER) => {
        const className = style
        switch (player) {
            case PLAYER.PLAYER_ONE:
                return setSquareColor(PLAYER.PLAYER_ONE)
            case PLAYER.PLAYER_TWO:
                return setSquareColor(PLAYER.PLAYER_TWO)
            default:
                return className
        }
    }


    const getClassNames = (status: SQUARE_STATUS) => {
        const className = style.square
        switch (status) {
            case SQUARE_STATUS.AVAILABLE:
                return `${className} ${style.available}`
            case SQUARE_STATUS.OCCUPIED:
                return `${className} ${style.occupied}`
            default:
                return className
        }
    }

    const handleClick = () => {
        if (status === SQUARE_STATUS.AVAILABLE) && Player === PLAYER.PLAYER_ONE  {
            setStatus(SQUARE_STATUS.OCCUPIED)

        }
    }

    function setPlayerStyle() {
        console.log(player)
        if (player === PLAYER.PLAYER_ONE) {
            return style.Black
        } else if (player === PLAYER.PLAYER_TWO) {
            return style.White
        }
    }


 isCurrentPlayer(): boolean {
     if (this.isTurn === true) {
         return true
     }
     return false
 }


 displayCurrentPlayer(): void {
     document.getElementById('playerTurn')?.remove()
     const element = document.createElement('div')
     element.setAttribute('id', 'playerTurn')
     const textNode = document.createTextNode("Now it's Player " + this.playerId + "\'s turn")
     element.appendChild(textNode)
     document.getElementById("header")?.appendChild(element)
 }
 }

 clearGrid(): void {
     this.grid.element.classList.remove('gameOver')
     this.player1.squaresDeclared = []
     this.player2.squaresDeclared = []
     document.getElementById('playerTurn')?.remove()
     const textNode = document.createTextNode("It's Player 1's turn")
     const element = document.createElement('div')
     element.classList.add("player1Header")
     element.setAttribute('id', 'playerTurn')
     element.appendChild(textNode)
     document.getElementById('header')?.appendChild(element)
     this.player1.isTurn = true
     this.player2.isTurn = false
     this.grid.rows.forEach(row => {
         row.squares.forEach(square => {
             square.element.classList.remove('occupied', 'playerone', 'playertwo')
             square.element.classList.add('available')
         })
     })
 }

 playerTurn(square: Square): void {
     if (this.player1.isCurrentPlayer()) {
         this.player1.squaresDeclared.push(square)
         square.element.classList.add('playerone')

     } else if (this.player2.isCurrentPlayer()) {
         square.element.classList.add('playertwo')
         this.player2.squaresDeclared.push(square)

     }
     if (!this.declareWinner()) {
         this.nextPlayer()
     }
 }

 nextPlayer(): void {
     if (this.player1.isCurrentPlayer()) {
         const text = "Player " + this.player2.playerId + 's turn';
         this.player1.isTurn = false
         this.player2.isTurn = true
         this.player2.displayCurrentPlayer()
         document.getElementById("playerTurn")?.classList.remove("player1Header")
         document.getElementById("playerTurn")?.classList.add("player2Header")
     } else {
         const text = "Player " + this.player1.playerId + 's turn'
         this.player2.isTurn = false
         this.player1.isTurn = true
         this.player1.displayCurrentPlayer()
         document.getElementById("playerTurn")?.classList.remove("player2Header")
         document.getElementById("playerTurn")?.classList.add("player1Header")
     }
 }

 displayWinner(message: string): void {
     document.getElementById('playerTurn')?.remove()
     const element = document.createElement('div')
     element.setAttribute('id', 'playerTurn')
     element.classList.add('winner')
     const textNode = document.createTextNode(message);
     element.appendChild(textNode)
     document.getElementById("header")?.appendChild(element)
     this.grid.element.classList.add('gameOver')
 }

 declareWinner(): boolean {
     if (this.player1.squaresDeclared.length + this.player2.squaresDeclared.length === this.grid.rows.length ** 2) {
         this.displayWinner("Its a TIE!")
         return true
     } else {
         const p1Array: number[][] = this.create2dArray(this.player1)
         const p2Array: number[][] = this.create2dArray(this.player2)
         if (this.fiveConseq(this.player1, p1Array)) {
             7
             this.displayWinner("Player 1 WINS!")
             return true
         } else if (this.fiveConseq(this.player2, p2Array)) {
             this.displayWinner("Player 2 WINS!")
             return true
         } else if (this.fiveDown(this.player2, p2Array)) {
             this.displayWinner("Player 2 WINS!")
             return true
         } else if (this.fiveDown(this.player1, p1Array)) {
             this.displayWinner("Player 1 WINS!")
             return true
         } else if (this.diagLeft(this.player2, p2Array)) {
             this.displayWinner("Player 2 WINS!")
             return true
         } else if (this.diagLeft(this.player1, p1Array)) {
             this.displayWinner("Player 1 WINS!")
             return true
         } else if (this.diagRight(this.player2, p2Array)) {
             this.displayWinner("Player 2 WINS!")
             return true
         } else if (this.diagRight(this.player1, p1Array)) {
             this.displayWinner("Player 1 WINS!")
             return true
         }

     }
     return false
 }

// Winner helper functions

 static exists(arr: number[][], search: number[]): boolean {
     return arr.some(row => JSON.stringify(row) === JSON.stringify(search))
 }


 create2dArray(player: Player): number[][] {
     const array = player.squaresDeclared
     let squareIds: number[][] = []
     array.forEach((square) => {
         squareIds.push([square.id, square.rowId])
     })
     return squareIds
 }

 //5 in a row functions

 Horizontal
 fiveConseq(player: Player, squareIds: number[][]): boolean {
     for (let idx = 0; idx < squareIds.length; idx++) {
         if (Game.exists(squareIds, [squareIds[idx][0], squareIds[idx][1]]) && Game.exists(squareIds, [squareIds[idx][0] + 1, squareIds[idx][1]]) && Game.exists(squareIds, [squareIds[idx][0] + 2, squareIds[idx][1]]) && Game.exists(squareIds, [squareIds[idx][0] + 3, squareIds[idx][1]]) && Game.exists(squareIds, [squareIds[idx][0] + 4, squareIds[idx][1]])) {
             if (!Game.exists(squareIds, [squareIds[idx][0] - 1, squareIds[idx][1]]) && !Game.exists(squareIds, [squareIds[idx][0] + 5, squareIds[idx][1]])) {
                 return true
             }

         }
     }
     return false
 }

 //Vertical
 
 fiveDown(player: Player, squareIds: number[][]): boolean {
     const number = this.grid.rows.length
     for (let idx = 0; idx < squareIds.length; idx++) {
         if (Game.exists(squareIds, [squareIds[idx][0], squareIds[idx][1]]) && Game.exists(squareIds, [squareIds[idx][0] + number, squareIds[idx][1] + 1]) && Game.exists(squareIds, [squareIds[idx][0] + (number * 2), squareIds[idx][1] + 2]) && Game.exists(squareIds, [squareIds[idx][0] + (number * 3), squareIds[idx][1] + 3]) && Game.exists(squareIds, [squareIds[idx][0] + (number * 4), squareIds[idx][1] + 4])) {
             if (!Game.exists(squareIds, [squareIds[idx][0] - number, squareIds[idx][1] - 1]) && !Game.exists(squareIds, [squareIds[idx][0] + (number * 5), squareIds[idx][1] + 5])) {
                 return true
             }
         }
     }
     return false
 }

 diagLeft(player: Player, squareIds: number[][]): boolean {
     const number = this.grid.rows.length - 1
     for (let idx = 0; idx < squareIds.length; idx++) {
         if (Game.exists(squareIds, [squareIds[idx][0], squareIds[idx][1]]) && Game.exists(squareIds, [squareIds[idx][0] + number, squareIds[idx][1] + 1]) && Game.exists(squareIds, [squareIds[idx][0] + (number * 2), squareIds[idx][1] + 2]) && Game.exists(squareIds, [squareIds[idx][0] + (number * 3), squareIds[idx][1] + 3]) && Game.exists(squareIds, [squareIds[idx][0] + (number * 4), squareIds[idx][1] + 4])) {
             if (!Game.exists(squareIds, [squareIds[idx][0] - number, squareIds[idx][1] - 1]) && !Game.exists(squareIds, [squareIds[idx][0] + (number * 5), squareIds[idx][1] + 5])) {
                 return true
             }
         }
     }
     return false
 }

 diagRight(player: Player, squareIds: number[][]): boolean {
     const number = this.grid.rows.length + 1
     for (let idx = 0; idx < squareIds.length; idx++) {
         if (Game.exists(squareIds, [squareIds[idx][0], squareIds[idx][1]]) && Game.exists(squareIds, [squareIds[idx][0] + number, squareIds[idx][1] + 1]) && Game.exists(squareIds, [squareIds[idx][0] + (number * 2), squareIds[idx][1] + 2]) && Game.exists(squareIds, [squareIds[idx][0] + (number * 3), squareIds[idx][1] + 3]) && Game.exists(squareIds, [squareIds[idx][0] + (number * 4), squareIds[idx][1] + 4])) {
             if (!Game.exists(squareIds, [squareIds[idx][0] - number, squareIds[idx][1] - 1]) && !Game.exists(squareIds, [squareIds[idx][0] + (number * 5), squareIds[idx][1] + 5])) {
                 return true
             }
         }
     }
     return false
 }
 }
